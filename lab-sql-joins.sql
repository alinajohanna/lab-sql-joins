# LAB | SQL Joins

## Challenge - Joining on multiple tables

-- Write SQL queries to perform the following tasks using the Sakila database:

USE sakila;

#1. List the number of films per category.
SELECT c.category_id, c.name, count(DISTINCT(fc.film_id))
FROM category c
JOIN film_category fc ON fc.category_id = c.category_id
GROUP BY 1,2
ORDER BY count(fc.film_id) DESC;

#2. Retrieve the store ID, city, and country for each store.
SELECT s.store_ID, ci.city, co.country
FROM store s
LEFT JOIN address a ON a.address_id = s.address_id
LEFT JOIN city ci ON ci.city_id = a.city_id
LEFT JOIN country co ON co.country_id = ci.country_id;

#3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS 'total_revenue'
FROM payment p
JOIN staff s ON s.staff_id = p.staff_id
GROUP BY s.store_id;

#4. Determine the average running time of films for each category.
SELECT 
	c.name,
	ROUND(AVG(f.length),2) AS 'avg_running_time'
FROM film f
LEFT JOIN film_category fc ON fc.film_id = f.film_id
LEFT JOIN category c ON c.category_id = fc.category_id
GROUP BY 1
ORDER BY AVG(f.length) DESC;

-- **Bonus**:

#5.  Identify the film categories with the longest average running time.
SELECT 
	c.name,
	ROUND(AVG(f.length),2) AS 'avg_running_time'
FROM film f
LEFT JOIN film_category fc ON fc.film_id = f.film_id
LEFT JOIN category c ON c.category_id = fc.category_id
GROUP BY 1
ORDER BY AVG(f.length) DESC
LIMIT 3;

#6.  Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(r.rental_date) AS 'no_rentals'
FROM rental r
LEFT JOIN inventory i ON i.inventory_id = r.inventory_id
LEFT JOIN film f ON f.film_id = i.film_id
GROUP BY 1
ORDER BY COUNT(r.rental_date) DESC
LIMIT 10;

#7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT s.store_id, f.title, count(f.title) AS 'count_of_films'
FROM film f
JOIN inventory i ON i.film_id = f.film_id
JOIN store s ON s.store_id = i.store_id
WHERE f.title = "Academy Dinosaur" AND s.store_id = 1
GROUP BY s.store_id;

#8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

SELECT DISTINCT f.film_id, f.title, 
CASE
WHEN IFNULL(i.film_id,"")="" THEN "NOT available"
ELSE "Available"
END AS "availability"
FROM inventory i 
RIGHT JOIN film f ON i.film_id = f.film_id;

-- or as usually with LEFT JOIN:
SELECT DISTINCT f.film_id, f.title, 
CASE
WHEN IFNULL(i.film_id,"")="" THEN "NOT available"
ELSE "Available"
END AS "availability"
FROM film f 
LEFT JOIN inventory i ON f.film_id = i.film_id;